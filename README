Lab1:

1. create github repo

2. create local repo using git init

3. push changes to remote repo

ex:
  503  mkdir bbitapp
  504  cd b
  505  cd bbit
  506  ls -lrt
  507  pwd
  508  git status
  509  git init
  510  git status
  511  git add .
  512  git status
  513  git commit -m "BB-1010: added new file for app"
  514  git status
  515  git log 
  516  git push
  517  git remote -v
  518  git remote add origin https://github.com/bbitinsight/devops.git
  519  git remote -v
  520  git branch
  521  git push origin main
  522  git pull
  523  git pull origin main
  524  git log 
lab2:
  1. create branches from local repo and push into remote:
      rel1.0.0
      develop
      bb-1010
      bb-1011
  2. switch to bb-1010 branch and add few new commits
  3. push changes to bb-1010 remote branch
  4. raise PR from bb-1010 to develop and merge.

solution:
       git branch
  575  git branch rel1.0.0
  576  git branch
  577  git branch dev
  578  git branch bb-1010
  579  git branch dev
  580  git branch
  581  git push origin --all
  584  git branhc
  585  git branch
  586  git checkout bb-1010
  587  git branch
  589  git log --oneline
  590  touch pod.yml
  591  vi pod.yml 
  593  git add .
  594  git commit -m "updated"
  595  git push origin bb-1010
lab3:
   explore git revert and fork option in github
   explore on branch protection rules
 
lab4:
   enable webhook in github repo
   create httpsserver for github webhook in ec2:
    ref: https://github.com/qf-devops/git-server/blob/master/webhook.rb
   prepare endpoint url and updated in webhook 
      #ruby webhook.rb 8000
      #http://my.host:8000/
   
   lab5:
     waht is the use of cherry-pick  in git
     
   lab6:  maven
     1. install maven packge in ec2 instace
        >apt install maven -y
     2. clone sync source code into vm
        git clone https://github.com/bbitinsight/sync.git
     3. run maven command to build an appln
         > cd sync
         > mvn -f pom.xml clean install
     4. clone below multi module project repo:
         git clone https://github.com/qf-devops/maven-multimodule.git
     5. run maven  command
         > cd maven-multimodule
         > mvn -f pom.xml clean install
         
   lab7: nexus repo
   1. install docker package:
      > apt update
      >apt  install docker.io
   2. run below command in vm to start nexu repo server
      >docker run -d -p 8081:8081 --name nexus sonatype/nexus3
   3. check logs and get the password:
      >docker logs nexus
      >docker exec -it nexus cat /nexus-data/admin.password
   4. create repos(snapshots, releases) in nexus
   5.  create role with repo previleges 
   6. create user with above role assignment.
   7. runbelow mvn command:
        mvn -s settings.xml clean deploy
   
Lab8: install  jenkins in vm
curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo tee \
  /usr/share/keyrings/jenkins-keyring.asc > /dev/null
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
  
sudo apt-get update
sudo apt-get install jenkins

docker run -itd -p 8080:8080 --name=jen jenkins/jenkins:lts
docker exec -it jen cat /var/jenkins_home/secrets/initialAdminPassword

lab9: cfreate jenkins pipeline job
  https://github.com/bbitinsight/sync
  run jenkins job and ensure build success.
lab10:  add agent to jenkins master
 1. create new vm for agent
 2. genrate ssh-kyes in jenkins server
 3. use node add in jenkins manage section
 4. fill all the details
 
 lab11:  add webhook to trgiggert the jenkins job
1. prepare the end point url:
   JENKINS_URL/job/sync-build/build?token=TOKEN_NAME 
   webhook url:  http://devops:110f3d5810639bd3dd1db7230112a592f5@13.59.226.252:8080/job/sync-build/build?token=bvcjhschjvshj
   url
   token
   user
   genrate user token from user configuration
 2. add url in github webhook section 

Assignment:
read about sonarqube/sonarcloud
intgrate ldap with jenkins server to restrict the authentication.
AWS:  IAM policy, IAM role, IAM user


Lab12:
  Add agent to jenkins master..
  prereq:
    vm, directory
    ssh keys from jenkins srver
    copy private key at jenkis server side
    copy public key at vm side (.ssh/authorized_keys)

lab13:
  cloud agent configuration for jenkins
  install cloud provider plugin: ec2
  init script:
    sudo apt update && sudo apt install maven -y
 lab14:
   intgrate sonarqube with jenkins and maven:
     run sonarqube using below command in vm:
      docker run -itd -p 9000:9000 --name=sonar sonarqube
     commnd in jenkinsfile: 
     sh "mvn clean verify sonar:sonar -Dsonar.projectKey=sync -Dsonar.host.url=http://18.222.169.237:9000 -Dsonar.login=sqp_4e103df3de1783de43368689d22a29df7aeeabe3"
lab15:
  create developer user in jenkins and provide read permissions
  
lab16:
  Run selenium code inm vsc:
  https://funnelgarden.com/setup-selenium-with-java-on-visual-studio-code/
  
  
  
  
